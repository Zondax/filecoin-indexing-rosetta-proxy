// Code generated by mockery v2.20.0. DO NOT EDIT.

//nolint
package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// DataStoreMock is an autogenerated mock type for the IDataStoreClient type
type DataStoreMock struct {
	mock.Mock
}

// DeleteFiles provides a mock function with given fields: name, location
func (_m *DataStoreMock) DeleteFiles(name string, location string) error {
	ret := _m.Called(name, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: name, location
func (_m *DataStoreMock) GetFile(name string, location string) ([]byte, error) {
	ret := _m.Called(name, location)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(name, location)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(name, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: dir, prefix
func (_m *DataStoreMock) List(dir string, prefix string) ([]string, error) {
	ret := _m.Called(dir, prefix)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(dir, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(dir, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dir, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChan provides a mock function with given fields: ctx, dir, prefix
func (_m *DataStoreMock) ListChan(ctx context.Context, dir string, prefix string) (<-chan string, error) {
	ret := _m.Called(ctx, dir, prefix)

	var r0 <-chan string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (<-chan string, error)); ok {
		return rf(ctx, dir, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan string); ok {
		r0 = rf(ctx, dir, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dir, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameFile provides a mock function with given fields: oldName, newName, bucket
func (_m *DataStoreMock) RenameFile(oldName string, newName string, bucket string) error {
	ret := _m.Called(oldName, newName, bucket)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(oldName, newName, bucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageType provides a mock function with given fields:
func (_m *DataStoreMock) StorageType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UploadFromBytes provides a mock function with given fields: data, destFolder, destName
func (_m *DataStoreMock) UploadFromBytes(data []byte, destFolder string, destName string) error {
	ret := _m.Called(data, destFolder, destName)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string) error); ok {
		r0 = rf(data, destFolder, destName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFromFile provides a mock function with given fields: filePath, dest
func (_m *DataStoreMock) UploadFromFile(filePath string, dest string) error {
	ret := _m.Called(filePath, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filePath, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFromReader provides a mock function with given fields: data, size, destFolder, destName
func (_m *DataStoreMock) UploadFromReader(data io.Reader, size int64, destFolder string, destName string) error {
	ret := _m.Called(data, size, destFolder, destName)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, int64, string, string) error); ok {
		r0 = rf(data, size, destFolder, destName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDataStoreMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataStoreMock creates a new instance of DataStoreMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataStoreMock(t mockConstructorTestingTNewDataStoreMock) *DataStoreMock {
	mock := &DataStoreMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
