// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewDataStoreMock creates a new instance of DataStoreMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataStoreMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataStoreMock {
	mock := &DataStoreMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DataStoreMock is an autogenerated mock type for the IDataStoreClient type
type DataStoreMock struct {
	mock.Mock
}

type DataStoreMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DataStoreMock) EXPECT() *DataStoreMock_Expecter {
	return &DataStoreMock_Expecter{mock: &_m.Mock}
}

// DeleteFiles provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) DeleteFiles(name string, location string) error {
	ret := _mock.Called(name, location)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFiles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(name, location)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DataStoreMock_DeleteFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFiles'
type DataStoreMock_DeleteFiles_Call struct {
	*mock.Call
}

// DeleteFiles is a helper method to define mock.On call
//   - name
//   - location
func (_e *DataStoreMock_Expecter) DeleteFiles(name interface{}, location interface{}) *DataStoreMock_DeleteFiles_Call {
	return &DataStoreMock_DeleteFiles_Call{Call: _e.mock.On("DeleteFiles", name, location)}
}

func (_c *DataStoreMock_DeleteFiles_Call) Run(run func(name string, location string)) *DataStoreMock_DeleteFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DataStoreMock_DeleteFiles_Call) Return(err error) *DataStoreMock_DeleteFiles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DataStoreMock_DeleteFiles_Call) RunAndReturn(run func(name string, location string) error) *DataStoreMock_DeleteFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) GetFile(name string, location string) ([]byte, error) {
	ret := _mock.Called(name, location)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return returnFunc(name, location)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = returnFunc(name, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(name, location)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DataStoreMock_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type DataStoreMock_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - name
//   - location
func (_e *DataStoreMock_Expecter) GetFile(name interface{}, location interface{}) *DataStoreMock_GetFile_Call {
	return &DataStoreMock_GetFile_Call{Call: _e.mock.On("GetFile", name, location)}
}

func (_c *DataStoreMock_GetFile_Call) Run(run func(name string, location string)) *DataStoreMock_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DataStoreMock_GetFile_Call) Return(bytes []byte, err error) *DataStoreMock_GetFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *DataStoreMock_GetFile_Call) RunAndReturn(run func(name string, location string) ([]byte, error)) *DataStoreMock_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) List(dir string, prefix string) ([]string, error) {
	ret := _mock.Called(dir, prefix)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return returnFunc(dir, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = returnFunc(dir, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(dir, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DataStoreMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DataStoreMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - dir
//   - prefix
func (_e *DataStoreMock_Expecter) List(dir interface{}, prefix interface{}) *DataStoreMock_List_Call {
	return &DataStoreMock_List_Call{Call: _e.mock.On("List", dir, prefix)}
}

func (_c *DataStoreMock_List_Call) Run(run func(dir string, prefix string)) *DataStoreMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DataStoreMock_List_Call) Return(strings []string, err error) *DataStoreMock_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *DataStoreMock_List_Call) RunAndReturn(run func(dir string, prefix string) ([]string, error)) *DataStoreMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListChan provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) ListChan(ctx context.Context, dir string, prefix string) (<-chan string, error) {
	ret := _mock.Called(ctx, dir, prefix)

	if len(ret) == 0 {
		panic("no return value specified for ListChan")
	}

	var r0 <-chan string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (<-chan string, error)); ok {
		return returnFunc(ctx, dir, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) <-chan string); ok {
		r0 = returnFunc(ctx, dir, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, dir, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DataStoreMock_ListChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChan'
type DataStoreMock_ListChan_Call struct {
	*mock.Call
}

// ListChan is a helper method to define mock.On call
//   - ctx
//   - dir
//   - prefix
func (_e *DataStoreMock_Expecter) ListChan(ctx interface{}, dir interface{}, prefix interface{}) *DataStoreMock_ListChan_Call {
	return &DataStoreMock_ListChan_Call{Call: _e.mock.On("ListChan", ctx, dir, prefix)}
}

func (_c *DataStoreMock_ListChan_Call) Run(run func(ctx context.Context, dir string, prefix string)) *DataStoreMock_ListChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataStoreMock_ListChan_Call) Return(stringCh <-chan string, err error) *DataStoreMock_ListChan_Call {
	_c.Call.Return(stringCh, err)
	return _c
}

func (_c *DataStoreMock_ListChan_Call) RunAndReturn(run func(ctx context.Context, dir string, prefix string) (<-chan string, error)) *DataStoreMock_ListChan_Call {
	_c.Call.Return(run)
	return _c
}

// RenameFile provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) RenameFile(oldName string, newName string, bucket string) error {
	ret := _mock.Called(oldName, newName, bucket)

	if len(ret) == 0 {
		panic("no return value specified for RenameFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(oldName, newName, bucket)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DataStoreMock_RenameFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameFile'
type DataStoreMock_RenameFile_Call struct {
	*mock.Call
}

// RenameFile is a helper method to define mock.On call
//   - oldName
//   - newName
//   - bucket
func (_e *DataStoreMock_Expecter) RenameFile(oldName interface{}, newName interface{}, bucket interface{}) *DataStoreMock_RenameFile_Call {
	return &DataStoreMock_RenameFile_Call{Call: _e.mock.On("RenameFile", oldName, newName, bucket)}
}

func (_c *DataStoreMock_RenameFile_Call) Run(run func(oldName string, newName string, bucket string)) *DataStoreMock_RenameFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataStoreMock_RenameFile_Call) Return(err error) *DataStoreMock_RenameFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DataStoreMock_RenameFile_Call) RunAndReturn(run func(oldName string, newName string, bucket string) error) *DataStoreMock_RenameFile_Call {
	_c.Call.Return(run)
	return _c
}

// StorageType provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) StorageType() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StorageType")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// DataStoreMock_StorageType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageType'
type DataStoreMock_StorageType_Call struct {
	*mock.Call
}

// StorageType is a helper method to define mock.On call
func (_e *DataStoreMock_Expecter) StorageType() *DataStoreMock_StorageType_Call {
	return &DataStoreMock_StorageType_Call{Call: _e.mock.On("StorageType")}
}

func (_c *DataStoreMock_StorageType_Call) Run(run func()) *DataStoreMock_StorageType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataStoreMock_StorageType_Call) Return(s string) *DataStoreMock_StorageType_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *DataStoreMock_StorageType_Call) RunAndReturn(run func() string) *DataStoreMock_StorageType_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFromBytes provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) UploadFromBytes(data []byte, destFolder string, destName string) error {
	ret := _mock.Called(data, destFolder, destName)

	if len(ret) == 0 {
		panic("no return value specified for UploadFromBytes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, string, string) error); ok {
		r0 = returnFunc(data, destFolder, destName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DataStoreMock_UploadFromBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFromBytes'
type DataStoreMock_UploadFromBytes_Call struct {
	*mock.Call
}

// UploadFromBytes is a helper method to define mock.On call
//   - data
//   - destFolder
//   - destName
func (_e *DataStoreMock_Expecter) UploadFromBytes(data interface{}, destFolder interface{}, destName interface{}) *DataStoreMock_UploadFromBytes_Call {
	return &DataStoreMock_UploadFromBytes_Call{Call: _e.mock.On("UploadFromBytes", data, destFolder, destName)}
}

func (_c *DataStoreMock_UploadFromBytes_Call) Run(run func(data []byte, destFolder string, destName string)) *DataStoreMock_UploadFromBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataStoreMock_UploadFromBytes_Call) Return(err error) *DataStoreMock_UploadFromBytes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DataStoreMock_UploadFromBytes_Call) RunAndReturn(run func(data []byte, destFolder string, destName string) error) *DataStoreMock_UploadFromBytes_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFromFile provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) UploadFromFile(filePath string, dest string) error {
	ret := _mock.Called(filePath, dest)

	if len(ret) == 0 {
		panic("no return value specified for UploadFromFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(filePath, dest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DataStoreMock_UploadFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFromFile'
type DataStoreMock_UploadFromFile_Call struct {
	*mock.Call
}

// UploadFromFile is a helper method to define mock.On call
//   - filePath
//   - dest
func (_e *DataStoreMock_Expecter) UploadFromFile(filePath interface{}, dest interface{}) *DataStoreMock_UploadFromFile_Call {
	return &DataStoreMock_UploadFromFile_Call{Call: _e.mock.On("UploadFromFile", filePath, dest)}
}

func (_c *DataStoreMock_UploadFromFile_Call) Run(run func(filePath string, dest string)) *DataStoreMock_UploadFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DataStoreMock_UploadFromFile_Call) Return(err error) *DataStoreMock_UploadFromFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DataStoreMock_UploadFromFile_Call) RunAndReturn(run func(filePath string, dest string) error) *DataStoreMock_UploadFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFromReader provides a mock function for the type DataStoreMock
func (_mock *DataStoreMock) UploadFromReader(data io.Reader, size int64, destFolder string, destName string) error {
	ret := _mock.Called(data, size, destFolder, destName)

	if len(ret) == 0 {
		panic("no return value specified for UploadFromReader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader, int64, string, string) error); ok {
		r0 = returnFunc(data, size, destFolder, destName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DataStoreMock_UploadFromReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFromReader'
type DataStoreMock_UploadFromReader_Call struct {
	*mock.Call
}

// UploadFromReader is a helper method to define mock.On call
//   - data
//   - size
//   - destFolder
//   - destName
func (_e *DataStoreMock_Expecter) UploadFromReader(data interface{}, size interface{}, destFolder interface{}, destName interface{}) *DataStoreMock_UploadFromReader_Call {
	return &DataStoreMock_UploadFromReader_Call{Call: _e.mock.On("UploadFromReader", data, size, destFolder, destName)}
}

func (_c *DataStoreMock_UploadFromReader_Call) Run(run func(data io.Reader, size int64, destFolder string, destName string)) *DataStoreMock_UploadFromReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DataStoreMock_UploadFromReader_Call) Return(err error) *DataStoreMock_UploadFromReader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DataStoreMock_UploadFromReader_Call) RunAndReturn(run func(data io.Reader, size int64, destFolder string, destName string) error) *DataStoreMock_UploadFromReader_Call {
	_c.Call.Return(run)
	return _c
}
